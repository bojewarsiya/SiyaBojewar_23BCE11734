Dataset-db.sales.insertMany([
	{ "_id" : 1, "item" : "Americanos", "price" : 5, "size": "Short", "quantity" : 22, "date" : ISODate("2022-01-15T08:00:00Z") },
	{ "_id" : 2, "item" : "Cappuccino", "price" : 6, "size": "Short","quantity" : 12, "date" : ISODate("2022-01-16T09:00:00Z") },
	{ "_id" : 3, "item" : "Lattes", "price" : 15, "size": "Grande","quantity" : 25, "date" : ISODate("2022-01-16T09:05:00Z") },
	{ "_id" : 4, "item" : "Mochas", "price" : 25,"size": "Tall", "quantity" : 11, "date" : ISODate("2022-02-17T08:00:00Z") },
	{ "_id" : 5, "item" : "Americanos", "price" : 10, "size": "Grande","quantity" : 12, "date" : ISODate("2022-02-18T21:06:00Z") },
	{ "_id" : 6, "item" : "Cappuccino", "price" : 7, "size": "Tall","quantity" : 20, "date" : ISODate("2022-02-20T10:07:00Z") },
	{ "_id" : 7, "item" : "Lattes", "price" : 25,"size": "Tall", "quantity" : 30, "date" : ISODate("2022-02-21T10:08:00Z") },
	{ "_id" : 8, "item" : "Americanos", "price" : 10, "size": "Grande","quantity" : 21, "date" : ISODate("2022-02-22T14:09:00Z") },
	{ "_id" : 9, "item" : "Cappuccino", "price" : 10, "size": "Grande","quantity" : 17, "date" : ISODate("2022-02-23T14:09:00Z") },
	{ "_id" : 10, "item" : "Americanos", "price" : 8, "size": "Tall","quantity" : 15, "date" : ISODate("2022-02-25T14:09:00Z")}
]);

que1)Find the total revenue (price Ã— quantity) for each item, sorted from highest to lowest.
ans-db.sales.aggregate([
  {
    $project: {
      item: 1,
      revenue: { $multiply: ["$price", "$quantity"] }
    }
  },
  {
    $group: {
      _id: "$item",
      totalRevenue: { $sum: "$revenue" }
    }
  },
  {
    $sort: {
      totalRevenue: -1
    }
  }
])


Que 2)Calculate the total quantity sold per month in 2022. 
ans-db.sales.aggregate([
  {
    $group: {
      _id: { month: { $month: "$date" } },
      totalQuantity: { $sum: "$quantity" }
    }
  },
  { $sort: { "_id.month": 1 } }
])

Que 3)Find all items where price is greater than 10 and size is not 'Short'.
ans-db.sales.find({
  price: { $gt: 10 },
  size: { $ne: "Short" }
})

Que 4) Get all Cappuccino sales with quantity between 10 and 20.
ans-db.sales.find({
  item: "Cappuccino",
  quantity: { $gte: 10, $lte: 20 }
})


Que 5)Query to find items where the item name starts with "A".
ans-db.sales.find({
  item: { $regex: /^A/ }
})


Que 6)Find all records that do not have the field size.
Ans- db.db.sales.countDocuments({ size: { $exists: false } })
sales.countDocuments({ size: { $exists: true } })
Que 7) Find all sales that are either "Grande" or "Tall" but not "Americanos"
ans-db.sales.find({
  size: { $in: ["Grande", "Tall"] },
  item: { $ne: "Americanos" }
})


Que 8)List all items sold in February 2022.
ans-db.sales.find({
  date: {
    $gte: ISODate("2022-02-01T00:00:00Z"),
    $lt: ISODate("2022-03-01T00:00:00Z")
  }
})
Que 9)Find sales where the quantity is more than twice the price.
ans-db.sales.find({
  $expr: {
    $let: {
      vars: { doublePrice: { $multiply: [2, "$price"] } },
      in: { $gt: ["$quantity", "$$doublePrice"] }
    }
  }
})


Que 10)Find all sales where the price is greater than the average price of their respective size.
ans-db.sales.aggregate([
  {
    $lookup: {
      from: "sales",
      let: { thisSize: "$size", thisPrice: "$price" },
      pipeline: [
        { $match: { $expr: { $eq: ["$size", "$$thisSize"] } } },
        { $group: { _id: null, avgPrice: { $avg: "$price" } } }
      ],
      as: "avgData"
    }
  },
  { $unwind: "$avgData" },
  {
    $match: {
      $expr: { $gt: ["$price", "$avgData.avgPrice"] }
    }
  }
])

Que 11) Find Sales Where the Day of Week Matches Quantity's Last Digit
[Filter sales where the day of the week (0=Sunday, 1=Monday, etc.) matches the last digit of quantity]
ans-db.sales.find({
  $expr: {
    $eq: [
      { $subtract: [{ $dayOfWeek: "$date" }, 1] },   
      { $mod: ["$quantity", 10] }                    
    ]
  }
})

Que 12)Find Sales Where the Month is Prime and Quantity is Odd [Filter sales where the month (1-12) is a prime number (2,3,5,7,11) AND quantity is odd]
ans-db.sales.find({
  $where: function() {
    const month = this.date.getMonth() + 1; 
    const quantity = this.quantity;
    const primes = [2, 3, 5, 7, 11];
    return primes.includes(month) && (quantity % 2 === 1);
  }
})

Que 13) Find Sales with "Suspicious Quantities" (Divisible by 5 or 7)
[Filter sales where quantity is divisible by 5 or 7]
ans-db.sales.find({
  $where: function() {
    const q = this.quantity;
    return (q % 5 === 0) || (q % 7 === 0);
  }
})

